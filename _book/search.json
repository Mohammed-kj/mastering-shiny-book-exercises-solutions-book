[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"WIP website Mastering Shiny Solutions, solution manual exercises Mastering Shiny, written Hadley Wickham.solutions entirely worked Howard Baek.","code":""},{"path":"index.html","id":"about-the-author","chapter":"Welcome","heading":"About the Author","text":"Howard Baek Master’s student Biostatistics University Washington. Bachelor’s degree Statistics Mathematics minor school. past experiences include Machine Learning Internship Northwest Fisheries Science Center (NWFSC), created algorithm detect oceanographic process, NIH-funded Research Assistantship Behavioral Research Technology Engineering (BRiTE) Center, developed Shiny Dashboard allows patients clinicians addiction treatment monitor patients’ progress goals time, Educational Data Mining Research Internship George Mason University, analyzed real world datasets Stanford online course created Shiny Dashboard instructors interact dataset.","code":""},{"path":"your-first-shiny-app.html","id":"your-first-shiny-app","chapter":"1 Your first Shiny app","heading":"1 Your first Shiny app","text":"","code":""},{"path":"your-first-shiny-app.html","id":"exercises","chapter":"1 Your first Shiny app","heading":"1.8 Exercises","text":"’s new additional calculations 5 10 added product outputs rendered text.","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n    textInput(\"name\", \"What's your name?\"),\n    textOutput(\"greeting\")\n)\n\nserver <- function(input, output, session) {\n    \n    output$greeting <- renderText({\n        paste0(\"Hello \", input$name)\n    })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\n\nui <- fluidPage(\n    sliderInput(\"x\", label = \"If x is\", min = 1, max = 50, value = 30),\n    \"then x times 5 is\",\n    textOutput(\"product\")\n)\n\nserver <- function(input, output, session) {\n  \n    output$product <- renderText({ \n      # Fixed error\n       input$x * 5\n      # by adding input$ \n    })\n    \n}\n\nshinyApp(ui, server)\nlibrary(shiny)\n\nui <- fluidPage(\n    sliderInput(\"x\", label = \"If x is\", min = 1, max = 50, value = 30),\n    sliderInput(\"y\", label = \"and y is\", min = 1, max = 50, value = 30),\n    \"then x times y is\",\n    textOutput(\"product\")\n)\n\nserver <- function(input, output, session) {\n  \n    output$product <- renderText({ \n       input$x * input$y\n    })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\n\nui <- fluidPage(\n    sliderInput(\"x\", \"If x is\", min = 1, max = 50, value = 30),\n    sliderInput(\"y\", \"and y is\", min = 1, max = 50, value = 5),\n    \"then, (x * y) is\", textOutput(\"product\"),\n    \"and, (x * y) + 5 is\", textOutput(\"product_plus5\"),\n    \"and (x * y) + 10 is\", textOutput(\"product_plus10\")\n)\n\nserver <- function(input, output, session) {\n    # Add this reactive expression to reduce \n    # amount of duplicated code\n    product <- reactive({\n        input$x * input$y\n    })\n    \n    output$product <- renderText({ \n        product()\n    })\n    output$product_plus5 <- renderText({ \n        product() + 5\n    })\n    output$product_plus10 <- renderText({ \n        product() + 10\n    })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(ggplot2)\n\ndatasets <- c(\"economics\", \"faithfuld\", \"seals\")\n\nui <- fluidPage(\n    selectInput(\"dataset\", \"Dataset\", choices = datasets),\n    verbatimTextOutput(\"summary\"),\n    # 1st Bug: tableOutput -> plotOutput\n    plotOutput(\"plot\")\n)\n\nserver <- function(input, output, session) {\n  \n    dataset <- reactive({\n        get(input$dataset, \"package:ggplot2\")\n    })\n    \n    # Fixed spelling\n    output$summary <- renderPrint({\n        summary(dataset())\n    })\n    \n    output$plot <- renderPlot({\n      # dataset -> dataset() because its a reactive\n        plot(dataset())\n    }, res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"basic-ui.html","id":"basic-ui","chapter":"2 Basic UI","heading":"2 Basic UI","text":"","code":""},{"path":"basic-ui.html","id":"exercises-1","chapter":"2 Basic UI","heading":"2.2.8 Exercises","text":"can fill parameter, value, inside textInput(): textInput(\"name\", value = \"name)can fill parameter, value, inside textInput(): textInput(\"name\", value = \"name)documentation states, “’s also possible group related inputs providing named list whose elements (either named unnamed) lists, vectors, factors. case, outermost names used group labels (leveraging  HTML tag) elements respective sublist. See example section small demo feature.”","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n    sliderInput(inputId = \"user_input\",\n                label = \"User Input\", \n                value = 10,\n                min = 0, max = 100,\n                step = 5,\n                # Added animation\n                animate = animationOptions(\n                    interval = 1000,\n                    loop = TRUE,\n                    playButton = NULL,\n                    pauseButton = NULL\n                )\n    )\n    \n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"basic-ui.html","id":"exercises-2","chapter":"2 Basic UI","heading":"2.3.5 Exercises","text":"renderPrint(summary(mtcars)) paired verbatimTextOutput since console output.renderText(\"Good morning!\") paired textOutput since regular textrenderPrint(t.test(1:5, 2:6)) paired verbatimTextOutput since console output.renderText(str(lm(mpg ~ wt, data = mtcars))) paired verbatimTextOutput since console output.(Borrowed https://mastering-shiny-solutions.org/basic-ui.html#exercise-3.3.5.3)","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n    plotOutput(\"plot\", width = \"700px\", height = \"300px\")\n)\n\nserver <- function(input, output, session) {\n    output$plot <- renderPlot(plot(1:5), res = 96, \n                              alt = \"Scatterplot of 5 random numbers\")\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\n\nui <- fluidPage(\n    dataTableOutput(\"table\")\n)\n\nserver <- function(input, output, session) {\n  \n    output$table <- renderDataTable(mtcars, \n                                    options = list(pageLength = 5,\n                                                   ordering = FALSE, \n                                                   searching = FALSE))\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(reactable)\n\nui <- fluidPage(\n  reactableOutput(\"table\")\n)\n\nserver <- function(input, output) {\n  \n  output$table <- renderReactable({\n    reactable(mtcars)\n  })\n  \n}\n\nshinyApp(ui, server)"},{"path":"basic-reactivity.html","id":"basic-reactivity","chapter":"3 Basic reactivity","heading":"3 Basic reactivity","text":"","code":""},{"path":"basic-reactivity.html","id":"exercises-3","chapter":"3 Basic reactivity","heading":"3.3.6 Exercises","text":"input$greeting –> output$greetingInside renderText, name –> input$nameFixed code: output$greeting <- renderText(paste0(\"Hello \", input$name))can make greeting reactive adding reactive(): greeting <- reactive(paste0(\"Hello \", input$name))Since greeting now reactive, need add parenthesis around : output$greeting <- renderText(greeting())Spelling error: output$greting –> output$greetingMissing renderText()Fixed code: output$greeting <- renderText(paste0(\"Hello \", input$name))Solution Mastering Shiny Solutions 2021Solution Mastering Shiny Solutions 2021Code fail df[[input$var]]. use range() var(), readers won’t know using reactive built-R function.Code fail df[[input$var]]. use range() var(), readers won’t know using reactive built-R function.","code":"\nserver1 <- function(input, output, server) {\n  input$greeting <- renderText(paste0(\"Hello \", name))\n}\nserver2 <- function(input, output, server) {\n  greeting <- paste0(\"Hello \", input$name)\n  output$greeting <- renderText(greeting)\n}\nserver3 <- function(input, output, server) {\n  output$greting <- paste0(\"Hello\", input$name)\n}"},{"path":"case-study-er-injuries.html","id":"case-study-er-injuries","chapter":"4 Case study: ER injuries","heading":"4 Case study: ER injuries","text":"","code":""},{"path":"case-study-er-injuries.html","id":"exercises-4","chapter":"4 Case study: ER injuries","heading":"4.8 Exercises","text":"Solution Mastering Shiny Solutions 2021Solution Mastering Shiny Solutions 2021IF flip fct_infreq() fct_lump(), order output sum weight diagnosis.Solution Mastering Shiny Solutions 2021","code":"\ninjuries <- vroom::vroom(\"neiss/injuries.tsv.gz\")\ninjuries\n\n# Original code\ninjuries %>%\n  mutate(diag = fct_lump(fct_infreq(diag), n = 5)) %>%\n  group_by(diag) %>%\n  summarise(n = as.integer(sum(weight)))\n\n# Flipped code\ninjuries %>%\n  mutate(diag = fct_infreq(fct_lump(diag, n = 5))) %>%\n  group_by(diag) %>%\n  summarise(n = as.integer(sum(weight)))\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(forcats)\nlibrary(vroom)\nlibrary(shiny)\n\nif (!exists(\"injuries\")) {\n  injuries <- vroom::vroom(\"neiss/injuries.tsv.gz\")\n  products <- vroom::vroom(\"neiss/products.tsv\")\n  population <- vroom::vroom(\"neiss/population.tsv\")\n}\n\nui <- fluidPage(\n  #<< first-row\n  fluidRow(\n    column(8,\n           selectInput(\"code\", \"Product\",\n                       choices = setNames(products$prod_code, products$title),\n                       width = \"100%\"\n           )\n    ),\n    column(2, selectInput(\"y\", \"Y axis\", c(\"rate\", \"count\"))),\n    # Input control that lets the user decide how many rows to show in the summary tables\n    column(2, numericInput(\"num_rows\", \"Number of Rows\", value = 5, min = 0, max = 6))\n  ),\n  #>>\n  fluidRow(\n    column(4, tableOutput(\"diag\")),\n    column(4, tableOutput(\"body_part\")),\n    column(4, tableOutput(\"location\"))\n  ),\n  fluidRow(\n    column(12, plotOutput(\"age_sex\"))\n  ),\n  #<< narrative-ui\n  fluidRow(\n    column(2, actionButton(\"story\", \"Tell me a story\")),\n    column(10, textOutput(\"narrative\"))\n  )\n  #>>\n)\n\ncount_top <- function(df, var, n = 5) {\n  df %>%\n    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%\n    group_by({{ var }}) %>%\n    summarise(n = as.integer(sum(weight)))\n}\n\nserver <- function(input, output, session) {\n  selected <- reactive(injuries %>% filter(prod_code == input$code))\n  \n  #<< tables\n  output$diag <- renderTable(count_top(selected(), diag) %>% slice(1:input$num_rows), width = \"100%\")\n  output$body_part <- renderTable(count_top(selected(), body_part) %>% slice(1:input$num_rows), width = \"100%\")\n  output$location <- renderTable(count_top(selected(), location) %>% slice(1:input$num_rows), width = \"100%\")\n  #>>\n  \n  summary <- reactive({\n    selected() %>%\n      count(age, sex, wt = weight) %>%\n      left_join(population, by = c(\"age\", \"sex\")) %>%\n      mutate(rate = n / population * 1e4)\n  })\n  \n  #<< plot\n  output$age_sex <- renderPlot({\n    if (input$y == \"count\") {\n      summary() %>%\n        ggplot(aes(age, n, colour = sex)) +\n        geom_line() +\n        labs(y = \"Estimated number of injuries\")\n    } else {\n      summary() %>%\n        ggplot(aes(age, rate, colour = sex)) +\n        geom_line(na.rm = TRUE) +\n        labs(y = \"Injuries per 10,000 people\")\n    }\n  }, res = 96)\n  #>>\n  \n  #<< narrative-server\n  narrative_sample <- eventReactive(\n    list(input$story, selected()),\n    selected() %>% pull(narrative) %>% sample(1)\n  )\n  output$narrative <- renderText(narrative_sample())\n  #>>\n}\n\nshinyApp(ui, server)"},{"path":"workflow.html","id":"workflow","chapter":"5 Workflow","heading":"5 Workflow","text":"exercises chapter.","code":""},{"path":"layout-themes-html.html","id":"layout-themes-html","chapter":"6 Layout, themes, HTML","heading":"6 Layout, themes, HTML","text":"","code":""},{"path":"layout-themes-html.html","id":"exercises-5","chapter":"6 Layout, themes, HTML","heading":"6.2.4 Exercises","text":"Documentation sidebarLayout(): “default, sidebar takes 1/3 width, main panel 2/3.” words, given width 12 columns, sidebar made 4 columns main panel 8 columns.","code":"\n# Recreate sidebarLayout()\nfluidRow(\n  # sidebar (4 columns)\n  column(4, \n         ...\n  ),\n  # # main panel (8 columns)\n  column(8, \n         ...\n  )\n)\nlibrary(shiny)\n\nui <- fluidPage(\n  titlePanel(\"Central limit theorem\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"m\", \"Number of samples:\", 2, min = 1, max = 100)\n    ),\n    mainPanel(\n      plotOutput(\"hist\")\n    ),\n    # Modified to put position of sidebar on the right\n    position = \"right\"\n  )\n)\nserver <- function(input, output, session) {\n  output$hist <- renderPlot({\n    means <- replicate(1e4, mean(runif(input$m)))\n    hist(means, breaks = 20)\n  }, res = 96)\n}\n\n\nshinyApp(ui, server)\n# Reference: https://shiny.rstudio.com/articles/layout-guide.html\n# UI ONLY\nlibrary(shiny)\nlibrary(ggplot2)\n\ndataset <- diamonds\n\nui <- fluidPage(\n  \n  title = \"Diamonds Explorer\",\n  \n  fluidRow(\n    column(6,\n           # First plot taking up half the width\n           plotOutput(\"plot1\")\n    ),\n    \n    column(6,\n           # Second plot taking up half the width\n           plotOutput(\"plot2\")\n    )\n  ),\n  # Horizontal Line\n  hr(),\n  \n  fluidRow(\n    column(3,\n           h4(\"Diamonds Explorer\"),\n           sliderInput('sampleSize', 'Sample Size', \n                       min=1, max=nrow(dataset), value=min(1000, nrow(dataset)), \n                       step=500, round=0),\n           br(),\n           checkboxInput('jitter', 'Jitter'),\n           checkboxInput('smooth', 'Smooth')\n    ),\n    column(4, offset = 1,\n           selectInput('x', 'X', names(dataset)),\n           selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),\n           selectInput('color', 'Color', c('None', names(dataset)))\n    ),\n    column(4,\n           selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),\n           selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))\n    )\n  )\n)\n\nshinyApp(ui, server)"},{"path":"graphics.html","id":"graphics","chapter":"7 Graphics","heading":"7 Graphics","text":"exercises chapter","code":""},{"path":"user-feedback.html","id":"user-feedback","chapter":"8 User feedback","heading":"8 User feedback","text":"exercises chapter.","code":""},{"path":"uploads-and-downloads.html","id":"uploads-and-downloads","chapter":"9 Uploads and downloads","heading":"9 Uploads and downloads","text":"","code":""},{"path":"uploads-and-downloads.html","id":"exercises-6","chapter":"9 Uploads and downloads","heading":"9.4 Exercises","text":"Mastering Shiny Solutions 2021:sure","code":"\nlibrary(shiny)\n# Increase max limit of size of uploaded file\noptions(shiny.maxRequestSize = 10 * 1024^2)\n\nui <- fluidPage(\n  # upload a csv file\n  fileInput(\"upload\", NULL, \n            buttonLabel = \"Upload CSV\", accept = \".csv\"),\n  # select a variable\n  selectInput(\"var\", \"Select a variable\", choices = NULL),\n  # show output of t.test()\n  verbatimTextOutput(\"t_test\")\n)\n\nserver <- function(input, output, session) {\n  # uploaded dataset\n  data <- reactive({\n    req(input$upload)\n    readr::read_csv(input$upload$datapath)\n  })\n  # once user uploads data, fill in the available variables\n  observeEvent(data(), {\n    choices <- unique(colnames(data()))\n    updateSelectInput(inputId = \"var\", choices = choices) \n  })\n  # show output of t-test\n  output$t_test <- renderPrint({ \n    req(input$var)\n    t.test(data()[[input$var]], mu = 0) \n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(tidyverse)\n\nui <- fluidPage(\n  # upload a csv file\n  fileInput(\"upload\", NULL, \n            buttonLabel = \"Upload CSV\", accept = \".csv\"),\n  # select a variable\n  selectInput(\"var\", \"Select a variable\", choices = NULL),\n  # show histogram\n  plotOutput(\"plot\"),\n  radioButtons(\"ext\", \"Save As:\",\n               choices = c(\"png\", \"pdf\", \"svg\"), inline = TRUE),\n  # download histogram\n  downloadButton(\"download\")\n)\n\nserver <- function(input, output, session) {\n  # uploaded dataset\n  data <- reactive({\n    req(input$upload)\n    read_csv(input$upload$datapath)\n  })\n  # once user uploads data, fill in the available variables\n  observeEvent(data(), {\n    choices <- unique(colnames(data()))\n    updateSelectInput(inputId = \"var\", choices = choices) \n  })\n  # create reactive plot \n  plot_output <- reactive({\n    req(input$var)\n    ggplot(data()) +\n      geom_histogram(aes(.data[[input$var]]))\n  })\n  # show histogram\n  output$plot <- renderPlot({\n    req(input$var)\n    plot_output()\n  })\n  # download \n  output$download <- downloadHandler(\n    filename = function() {\n      paste(\"histogram\", input$ext, sep = \".\")\n    }, \n    content = function(file) {\n      ggsave(file, plot_output(), device = input$ext)\n    }\n  )\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(brickr)\nlibrary(png)\n\n# Function to provide user feedback (checkout Chapter 8 for more info).\nnotify <- function(msg, id = NULL) {\n  showNotification(msg, id = id, duration = NULL, closeButton = FALSE)\n}\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      fluidRow(\n        fileInput(\"myFile\", \"Upload a PNG file\", accept = c('image/png')),\n        sliderInput(\"size\", \"Select size:\", min = 1, max = 100, value = 35),\n        radioButtons(\"color\", \"Select color palette:\", choices = c(\"universal\", \"generic\"))\n      )\n    ),\n    mainPanel(\n      plotOutput(\"result\"))\n  )\n)\n\nserver <- function(input, output) {\n  \n  imageFile <- reactive({\n    if(!is.null(input$myFile))\n      png::readPNG(input$myFile$datapath)\n  })\n  \n  output$result <- renderPlot({\n    req(imageFile())\n    \n    id <- notify(\"Transforming image...\")\n    on.exit(removeNotification(id), add = TRUE)\n    \n    imageFile() %>%\n      image_to_mosaic(img_size = input$size, color_palette = input$color) %>%\n      build_mosaic()\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"dynamic-ui","chapter":"10 Dynamic UI","heading":"10 Dynamic UI","text":"","code":""},{"path":"dynamic-ui.html","id":"exercises-7","chapter":"10 Dynamic UI","heading":"10.1.6 Exercises","text":"Circular reference seems issue. run app, numeric inputs continue update autonomously.","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  numericInput(\"year\", \"year\", value = 2020),\n  dateInput(\"date\", \"date\")\n)\n\nserver <- function(input, output, session) {\n  # MSS 2021\n  observeEvent(input$year, {\n    req(input$year)\n    date_range <- range(as.Date(paste0(input$year, \"-01-01\")),\n                        as.Date(paste0(input$year, \"-12-31\")))\n    updateDateInput(session, \"date\",\n                    min = date_range[1], \n                    max = date_range[2]\n    )\n  }) \n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(openintro, warn.conflicts = FALSE)\n\n# MSS 2021\nstates <- unique(county$state)\n\nui <- fluidPage(\n  selectInput(\"state\", \"State\", choices = states),\n  selectInput(\"county\", \"County\", choices = NULL)\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$state, {\n    req(input$state)\n    # pull out county names\n    choices <- county %>% \n      filter(state == input$state) %>%\n      pull(name) %>% \n      unique()\n    \n    updateSelectInput(inputId = \"county\", choices = choices)\n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(gapminder)\ncontinents <- unique(gapminder$continent)\n\n\nui <- fluidPage(\n  # add \"(All)\" to the list of choices\n  selectInput(\"continent\", \"Continent\", choices = continents), \n  selectInput(\"country\", \"Country\", choices = NULL),\n  tableOutput(\"data\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$continent, {\n    req(input$continent)\n    # pull out country names\n    choices <- gapminder %>% \n      filter(continent == input$continent) %>%\n      pull(country) %>% \n      unique()\n    \n    updateSelectInput(inputId = \"country\", choices = choices)\n  })\n  \n  output$data <- renderTable({\n    gapminder %>% \n      filter(continent == input$continent,\n             country == input$country)\n  })\n  \n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(gapminder)\ncontinents <- unique(gapminder$continent)\n\n\nui <- fluidPage(\n  # add \"(All)\" to the list of choices\n  selectInput(\"continent\", \"Continent\", choices = c(as.character(continents), \"(All)\")), \n  selectInput(\"country\", \"Country\", choices = NULL),\n  tableOutput(\"data\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$continent, {\n    req(input$continent)\n    \n    if (input$continent == \"(All)\") {\n      # pull out country names\n      choices <- gapminder %>% \n        pull(country) %>% \n        unique()\n      \n      updateSelectInput(inputId = \"country\", choices = choices)\n      \n    } else {    \n      # pull out country names\n      choices <- gapminder %>% \n        filter(continent == input$continent) %>%\n        pull(country) %>% \n        unique()\n      \n      updateSelectInput(inputId = \"country\", choices = choices)\n    }\n  })\n  \n  output$data <- renderTable({\n    if (input$continent == \"(All)\") {\n      gapminder %>% \n        filter(country == input$country)\n    } else {    \n      gapminder %>% \n        filter(continent == input$continent,\n               country == input$country)\n    }\n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\n\nu <- shinyUI(fluidPage(\n  titlePanel(\"Mutually Dependent Input Values\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"A\", \"A\",.333),\n      numericInput(\"B\", \"B\",.333),\n      numericInput(\"C\", \"C\",.333)\n    ),\n    mainPanel(\n      verbatimTextOutput(\"result\")\n    )\n  )\n)) \n\ns <- shinyServer(function(input, output,session) {\n  \n  observeEvent(input$A,{\n    newB <- 1 - input$A - input$C \n    updateNumericInput(session, \"B\", value = newB) \n    newC <- 1 - input$A - input$B \n    updateNumericInput(session, \"C\", value = newC) \n  })\n  observeEvent(input$B,{\n    newC <- 1 - input$B - input$A \n    updateNumericInput(session, \"C\", value = newC) \n    newA <- 1 - input$B - input$C \n    updateNumericInput(session, \"A\", value = newA) \n  })\n  observeEvent(input$C,{\n    newA <- 1 - input$C - input$B \n    updateNumericInput(session, \"A\", value = newA) \n    newB <- 1 - input$C - input$C \n    updateNumericInput(session, \"B\", value = newB) \n  })\n  \n  \n})\n\nshinyApp(u,s)"},{"path":"dynamic-ui.html","id":"exercises-8","chapter":"10 Dynamic UI","heading":"10.1.6 Exercises","text":"sure question, thought using checkboxInput()","code":"\nlibrary(shiny)\nlibrary(tidyverse)\n\n# Put the unique user interface for each geom in its own tabPanel(), \n# and then arrange the three tabs into a tabsetPanel()\nparameter_tabs <- tabsetPanel(\n  id = \"params\",\n  type = \"hidden\",\n  tabPanel(\"geom_histogram\",\n           numericInput(\"binwidth_hist\", \"binwidth\", value = 0.2)\n  ),\n  tabPanel(\"geom_freqpoly\", \n           numericInput(\"binwidth_freq\", \"binwidth\", value = 0.2)\n  ),\n  tabPanel(\"geom_density\",\n           numericInput(\"bw_density\", \"bandwidth\", value = 1),\n  )\n)\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"geom\", \"Select geom\", \n                  choices = c(\"geom_histogram\",\n                              \"geom_freqpoly\",\n                              \"geom_density\")\n      ),\n      parameter_tabs\n      \n    ),\n    mainPanel(\n      plotOutput(\"final_plot\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  # Change tabs depending on geom\n  observeEvent(input$geom, {\n    updateTabsetPanel(inputId = \"params\", selected = input$geom)\n  }) \n  \n  # Reactive plot\n  final_plot <- reactive({\n    switch(input$geom,\n           geom_histogram = ggplot(diamonds, aes(carat)) + geom_histogram(binwidth = input$binwidth_hist),\n           geom_freqpoly = ggplot(diamonds, aes(carat)) + geom_freqpoly(binwidth = input$binwidth_freq),\n           geom_density = ggplot(diamonds, aes(carat)) + geom_density(bw = input$bw_density),\n    )\n  })\n  \n  # Plot\n  output$final_plot <- renderPlot(final_plot(), res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"exercises-9","chapter":"10 Dynamic UI","heading":"10.3.5 Exercises","text":"app action button titled “Enter password.” click button, shown dialog box can enter password. enter password, see new message: “Password entered.” click enter password button second time, make input$password NULL , making password disappear.lose currently selected value. ensures don’t create reactive dependency cause code re-run every time input$dynamic changes (happen whenever user modifies value). want change input$type input$label changes.lose currently selected value. ensures don’t create reactive dependency cause code re-run every time input$dynamic changes (happen whenever user modifies value). want change input$type input$label changes.Solution MSS 2021Solution MSS 2021","code":"\nlibrary(shiny)\n\nparameter_tabs <- tabsetPanel(\n  id = \"params\",\n  type = \"hidden\",\n  tabPanel(\"slider\",\n           sliderInput(\"n\", \"n\", value = 0, min = 0, max = 100)\n  ),\n  tabPanel(\"numeric\",\n           numericInput(\"n\", \"n\", value = 0, min = 0, max = 100)\n  )\n)\n\nui <- fluidPage(\n  selectInput(\"type\", \"type\", c(\"slider\", \"numeric\")),\n  parameter_tabs\n)\nserver <- function(input, output, session) {\n  # Change tabs depending on type\n  observeEvent(input$type, {\n    updateTabsetPanel(inputId = \"params\", selected = input$type)\n  }) \n}\n\nshinyApp(ui, server)\nlibrary(shiny)\n\nui <- fluidPage(\n  actionButton(\"go\", \"Enter password\"),\n  textOutput(\"text\")\n)\nserver <- function(input, output, session) {\n  observeEvent(input$go, {\n    showModal(modalDialog(\n      passwordInput(\"password\", NULL),\n      title = \"Please enter your password\"\n    ))\n  })\n  \n  output$text <- renderText({\n    if (!isTruthy(input$password)) {\n      \"No password\"\n    } else {\n      \"Password entered\"\n    }\n  })\n}\n\nshinyApp(ui, server)"},{"path":"bookmarking.html","id":"bookmarking","chapter":"11 Bookmarking","heading":"11 Bookmarking","text":"","code":""},{"path":"bookmarking.html","id":"exercises-10","chapter":"11 Bookmarking","heading":"11.3 Exercises","text":"readRDS(\"shiny_bookmarks/cf6669ac8bfa4888/input.rds\") gives list one dataframe, upload, name, size, type, datapath uploaded datasets. Also, uploaded datasets saved inside shiny_bookmarks 0.csv 1.csv.","code":"\nlibrary(ambient)\nsimplex <- noise_simplex(c(500, 500), pertubation = 'normal', \n                         pertubation_amplitude = 40)\nplot(as.raster(normalise(simplex)))\nlibrary(shiny)\nlibrary(ambient)\n\nui <- function(request) {\n  fluidPage(\n    sidebarLayout(\n      sidebarPanel(\n        sliderInput(\"freq\", \"frequency\", value = 1, min = -2, max = 2, step = 0.01),\n        selectInput(\"fractal\", \"fractal\", choices = c(\"none\", \"fbm\", \"billow\", \"rigid-multi\"), selected = \"fbm\"),\n        sliderInput(\"lac\", \"lacunarity\", value = 2, min = 0, max = 5, step = 0.001),\n        sliderInput(\"gain\", \"gain\", value = 0.5, min = 0, max = 1, step = 0.001),\n        bookmarkButton()\n      ),\n      mainPanel(\n        plotOutput(\"fig\")\n      )\n    )\n  )\n}\n\nserver <- function(input, output, session) {\n  \n  simplex <- reactive({ \n    noise_simplex(dim = c(100, 100),\n                  frequency = input$freq,\n                  fractal = input$fractal,\n                  lacunarity = input$lac,\n                  gain = input$gain)\n  })\n  \n  output$fig <- renderPlot({\n    plot(as.raster(normalise(simplex())))\n  }, res = 96)\n}\n\nshinyApp(ui, server, enableBookmarking = \"url\")\nlibrary(shiny)\n\nui <- function(request) {\n  fluidPage(\n    fileInput(\"upload\", \"Upload CSV file\", accept = \".csv\", multiple = TRUE),\n    bookmarkButton()\n  )\n}\n\nserver <- function(input, output, session) {\n  \n  output$head <- renderTable({\n    head(data(), input$n)\n  })\n}\n\nshinyApp(ui, server, enableBookmarking = \"server\")"},{"path":"tidy-evaluation.html","id":"tidy-evaluation","chapter":"12 Tidy evaluation","heading":"12 Tidy evaluation","text":"exercises chapter.","code":""},{"path":"why-reactivity.html","id":"why-reactivity","chapter":"13 Why reactivity?","heading":"13 Why reactivity?","text":"exercises chapter.","code":""},{"path":"the-reactive-graph.html","id":"the-reactive-graph","chapter":"14 The reactive graph","heading":"14 The reactive graph","text":"","code":""},{"path":"the-reactive-graph.html","id":"exercises-11","chapter":"14 The reactive graph","heading":"14.4.5 Exercises","text":"","code":""},{"path":"the-reactive-graph.html","id":"section","chapter":"14 The reactive graph","heading":"1.","text":"Reactives run outputs. Server function contains inputs reactive expressions.sureNot sureWhen start session, y exist thus y() return error since y reactive expression consists .start session, y exist thus y() return error since y reactive expression consists .","code":""},{"path":"reactive-building-blocks.html","id":"reactive-building-blocks","chapter":"15 Reactive building blocks","heading":"15 Reactive building blocks","text":"exercises chapter.","code":""},{"path":"escaping-the-graph.html","id":"escaping-the-graph","chapter":"16 Escaping the graph","heading":"16 Escaping the graph","text":"exercises chapter.","code":""},{"path":"general-guidelines.html","id":"general-guidelines","chapter":"17 General guidelines","heading":"17 General guidelines","text":"exercises chapter.","code":""},{"path":"functions.html","id":"functions","chapter":"18 Functions","heading":"18 Functions","text":"exercises chapter.","code":""},{"path":"shiny-modules.html","id":"shiny-modules","chapter":"19 Shiny modules","heading":"19 Shiny modules","text":"","code":""},{"path":"packages.html","id":"packages","chapter":"20 Packages","heading":"20 Packages","text":"exercises chapter.","code":""},{"path":"testing.html","id":"testing","chapter":"21 Testing","heading":"21 Testing","text":"exercises chapter.","code":""},{"path":"security.html","id":"security","chapter":"22 Security","heading":"22 Security","text":"exercises chapter.","code":""},{"path":"performance.html","id":"performance","chapter":"23 Performance","heading":"23 Performance","text":"exercises chapter.","code":""}]
